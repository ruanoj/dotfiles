set nocompatible

if has("win32")
  source $VIMRUNTIME/vimrc_example.vim
  source $VIMRUNTIME/mswin.vim
  behave mswin
endif

if !has("win32")
  filetype off
  " set the runtime path to include Vundle and initialize
  set rtp+=~/.vim/bundle/vundle/
  call vundle#begin()
  " alternatively, pass a path where Vundle should install plugins
  "call vundle#begin('~/some/path/here')

  " Vundle has to manage Vundle.
  Bundle 'gmarik/vundle'

  " Syntax, colour schemes and the line
  Bundle 'sheerun/vim-polyglot'

  " Actual Plugins
  Bundle 'christoomey/vim-tmux-navigator'
  Bundle 'editorconfig/editorconfig-vim'

  Bundle 'kien/ctrlp.vim'
    " full path fuzzy file, buffer, mru, tag ... finder
    " https://github.com/kien/ctrlp.vim
    let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|bower_components\'
    let g:ctrlp_clear_cache_on_exit = 0
    let g:ctrlp_extensions = ['tag']
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  Bundle 'scrooloose/nerdtree'
    " filetree - NERDTree

  Bundle 'SirVer/ultisnips'
    " ultisnips settings so they don't compete with YCM
    let g:UltiSnipsExpandTrigger="<c-k>"
    let g:UltiSnipsJumpForwardTrigger="<c-k>"
    let g:UltiSnipsJumpBackwardTrigger="<s-c-j>"
    let g:UltiSnipsSnippetDirectories=["UltiSnips"]

  Bundle 'taq/vim-git-branch-info'
    " Shows branches information on the status line
    " https://github.com/taq/vim-git-branch-info/blob/master/plugin/git-branch-info.vim
    let g:git_branch_status_text=' Git'
    let g:git_branch_status_head_current=1
    let g:git_branch_status_nogit=""
    set statusline=%F%m%r%h%w\                  " fullpath and status modified sign
    set statusline+=\ %y                        " filetype
    set statusline+=\ %{GitBranchInfoString()}
    set statusline+=%=                          " this line bumps the line number to RHS
    set statusline+=\ [%l\/%L]                  " line number and column number

  Bundle 'terryma/vim-multiple-cursors'
    " https://github.com/terryma/vim-multiple-cursors
  Bundle 'tpope/vim-commentary'
    " comment stuff out
    " https://github.com/tpope/vim-commentary
  Bundle 'tpope/vim-dispatch'
    " kicks off builds and test suites using one of several asynchronous
    " adapters (inc. tmux, screen, iTerm, Windows and a headless mode)
    " https://github.com/tpope/vim-dispatch
  Bundle 'tpope/vim-endwise'
    " helps to end certain structures automatically
    " https://github.com/tpope/vim-endwise
  Bundle 'tpope/vim-eunuch'
    " Vim sugar for common UNIX shell commands
  Bundle 'tpope/vim-git'
    " ?
  Bundle 'tpope/vim-repeat'
    " remaps . in a way that plugins can tap into it
  Bundle 'tpope/vim-surround'
    " surroundings: parenthesis, brackets, quotes, XML tags and more
    " editing terms surrounded by tags
    " https://github.com/tpope/vim-surround

 Bundle 'xolox/vim-misc'
 Bundle 'xolox/vim-easytags'
    " https://github.com/xolox/vim-easytags

  " All of your Plugins must be added before the following line
  call vundle#end()
  " Enable file type detection. Do this after Vundle calls.
  filetype plugin indent on
  " To ignore plugin indent changes, instead use:
  "filetype plugin on
  "
  " Brief help
  " :PluginList			- list configured plugins
  " :PluginInstall(!)		- install (update) plugins
  " :PluginSearch(!) foo	- search (or refresh cache first) for foo
  " :PluginClean(1)		- confirm (or auto-approve) removal of unused plugins
  "
  " set :h vundle for mode details or wiki for FAQ
  " Put your non-Plugin stuff after this line
endif

" find
set path=**,.git
set suffixesadd=.java,.scala

" auto load files if vim detects they have been changed outside of Vim
set autoread

" assume the /g flag on :s substitutions to replace all matches in a line
set gdefault

" fix slight delay after pressing ESC then O
" it seems to fix slight delay after leader in insert mode (leader changed to
" space)
" http://superuser.com/questions/161178/why-does-vim-delay-for-a-second-whenever-i-use-the-o-command-open-a-new-line
" disabling escape keys makes cursor keys not work in insert mode
" set  noesckeys
set timeout ttimeoutlen=100

" allow unsaved background buffers and remember marks/undo for them
set hidden

" taken from https://github.com/dduponchel/dotfiles/blob/master/vim/vimrc
" Indicates a fast terminal connection.  More characters will be sent to
" the screen for redrawing, instead of using insert/delete line
" commands.  Improves smoothness of redrawing when there are multiple
" windows and the terminal does not support a scrolling region.
" Also enables the extra writing of characters at the end of each screen
" line for lines that wrap.  This helps when using copy/paste with the
" mouse in an xterm and other terminals.
set ttyfast

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" remember more commands and search history
set history=10000

" spaces > tabs.
" there, I said it.
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent

set spelllang=en_gb
syntax spell toplevel
" set some markdown specific things
autocmd FileType markdown setlocal shiftwidth=4 softtabstop=4 tabstop=4 wrap linebreak nolist wrap lbr colorcolumn=0
autocmd FileType tex setlocal colorcolumn=0 wrap lbr linebreak spell

set laststatus=2

" break properly, don't split words
set linebreak

" no folds
set nofoldenable


" show search matches as I type
set showmatch
set incsearch
set hlsearch

" Don't wait so long for the next keypress (particularly in ambiguous Leader
" situations. (via @r00k dotfiles)
set timeoutlen=500

" make searches case-sensitive only if they contain upper-case characters
set ignorecase smartcase

" 'very magic' shorthand for searches
nnoremap / /\v
vnoremap / /\v

" use <tab> to jump to matching brackets
nnoremap <tab> %
vnoremap <tab> %

" This unsets the 'last search pattern' register by hitting return.
" (Seen as <leader><space> in other dotfiles)
nnoremap <CR> :noh<CR><CR>


" keep more context when scrolling off the end of a buffer
set scrolloff=5

" Store temporary files in a central spot
set noswapfile
set backup
if has("win32")
  set backupdir=~\\_vim-tmp
  set directory=~\\_vim-tmp
else
  set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
  set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
endif

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Enable highlighting for syntax
syntax on

syntax spell toplevel

set wildmode=full
" make tab completion for files/buffers act like bash
set wildmenu

let mapleader="\<Space>"

" ignore git, npm modules and jekyll _site
set wildignore+=*.o,*.obj,.git,node_modules,_site,*.class,*.zip,*.aux

" I like line numbers
set number
set relativenumber

" pretty colours
set t_Co=256
if !has("win32") && !has('nvim')
  set term=xterm-256color
endif
set background=dark

" show some invisible characters
set list listchars=tab:»·,eol:¬,trail:·,nbsp:~

" :Q to quit (should be default)
command! Q q

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" set up the mouse
" I know, mouse is bad, but this is useful purely for resizing splits visually
" http://usevim.com/2012/05/16/mouse/
set ttyfast
set mouse=a
if !has('nvim')
  " removed from nvim
  set ttymouse=xterm2
endif

" turn indentline off by default
let g:indentLine_enabled = 0

" settings for tags and vim-easytags
set tags=./.tags;


let g:tex_flavor = "latex"

" ~~~ MAPPINGS BELOW ~~~

" TODO: make this better, more intelligent
" function! JF_find_private()
"  execute "/private"
" endfunction

function! OpenProjectNotes()
  let directory = getcwd()
  let filename = '_projectnotes.txt'
  exec ':vsplit ' . directory . '/' . filename
endfunction

map <leader>bb :!bundle install<cr>
map <leader>cf :CtrlPClearCache<cr>
map <leader>ct :TagbarToggle<CR>
map <leader>ctp :TagbarTogglePause<CR>
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
" map <leader>gf :e Gemfile<cr>
" map <leader>ls :echo UltiSnips_ListSnippets()<CR>
" nnoremap <leader>mt :call MW_MakeTwitterReferenceLink()<CR>
" nnoremap <leader>mfi :call MW_ConvertFencedToIndent()<CR>
" nnoremap <leader>my :call MW_YamlFrontMatter()<CR>
" nnoremap <leader>ml :call MW_MakeWordLink()<CR>
nnoremap <Leader>p :set invpaste paste?<CR>
" map <leader>pv :call JF_find_private()<cr>
map <leader>pt :CtrlPTag<cr>
nnoremap <leader>pn :call OpenProjectNotes()<cr>
map <Leader>rn :Rename
" map <leader>s :call JF_ExecuteRelevantTestFile()<CR>
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>sp :vsplit ~/dotfiles/scratchpad<cr>
map <leader>sc :setlocal spell!<CR>
" map <leader>sa :call JF_RunAllTests()<CR>
map <leader>sph <C-w>t<C-w>K<CR>
map <leader>spv <C-w>t<C-w>H<CR>
map <leader>o :CtrlP<cr>
map <leader>us :UltiSnipsEdit<CR>
" cleans up whitespace
" TODO extract this into FN which sets mark so it jumps back to where you were
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<cr>
map <Leader>p :set paste<CR>o<esc>"*]p:set nopaste<cr>

" map saving and tabs to Control-"
nnoremap <Leader>w :w<CR>
map <C-s> <esc>:w<CR>
imap <C-s> <esc>:w<CR>
map <C-q> <esc>:x<CR>
imap <C-q> <esc>:x<CR>
map <C-t> <esc>:tabnew<CR>

" make it do . in visual mode
vnoremap . :norm.<CR>

" per screen-line movement (as opposed to per file-line)
nnoremap j gj
nnoremap k gk

" navigating tabs
nnoremap th  :tabfirst<CR>
nnoremap tj  :tabnext<CR>
nnoremap tk  :tabprev<CR>
nnoremap tl  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tn  :tabnext<Space>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>

" Don't add the comment prefix when I hit enter or o/O on a comment line.
autocmd FileType * setlocal formatoptions-=r formatoptions-=o

" http://robots.thoughtbot.com/faster-grepping-in-vim/
" The Silver Searcher
if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects
    " .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_cache = 0
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR><CR>

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" Required for copy-paste between tmux on MacOSX ?
set clipboard=unnamed


" Protect large files from sourcing and other overhead.
" http://vim.wikia.com/wiki/Faster_loading_of_large_files
" Files become read only
if !exists("my_auto_commands_loaded")
  let my_auto_commands_loaded = 1
  " Large files are > 10M
  " Set options:
  " eventignore+=FileType (no syntax highlighting etc
  " assumes FileType always on)
  " noswapfile (save copy of file)
  " bufhidden=unload (save memory when other file is viewed)
  " buftype=nowritefile (is read-only)
  " undolevels=-1 (no undo possible)
  let g:LargeFile = 1024 * 1024 * 10
  augroup LargeFile
    autocmd BufReadPre * let f=expand("<afile>") | if getfsize(f) > g:LargeFile | set eventignore+=FileType | setlocal noswapfile bufhidden=unload buftype=nowrite undolevels=-1 | else | set eventignore-=FileType | endif
  augroup END
endif

" Open NERDTree automatically when vim starts up and no files were specified
autocmd vimenter * if !argc() | NERDTree | endif

" Absolute line numbers in insert mode, relative otherwise
autocmd insertEnter * set norelativenumber
autocmd insertLeave * set relativenumber

" add kspell to defaults in complete so spell checker is used when offering
" completions using C-X
set complete=.,w,b,u,t,i,kspell

" sudowrite
cmap w!! w !sudo tee % > /dev/null

