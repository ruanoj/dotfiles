set nocompatible 
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/vundle/
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" Vundle has to manage Vundle.
Bundle 'gmarik/vundle'

" Syntax, colour schemes and the line
Bundle 'sheerun/vim-polyglot'

" Actual Plugins
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-surround'
Bundle 'kien/ctrlp.vim'
Bundle 'SirVer/ultisnips'
Bundle 'christoomey/vim-tmux-navigator'
Bundle 'tpope/vim-rbenv'
Bundle 'tpope/vim-eunuch'
Bundle 'thoughtbot/vim-rspec'
Bundle 'editorconfig/editorconfig-vim'
Bundle 'rking/ag.vim'
Bundle 'elixir-lang/vim-elixir'
"Bundle 'vim-ruby/vim-ruby'
"Bundle 'jackfranklin/vim-markdown-writer'
Bundle 'taq/vim-git-branch-info'
Bundle 'scrooloose/nerdtree'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-dispatch'
Bundle 'xolox/vim-misc'
"Bundle 'xolox/vim-easytags'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'Valloric/YouCompleteMe'
Bundle 'marijnh/tern_for_vim'

" All of your Plugins must be added before the following line
call vundle#end()
" Enable file type detection. Do this after Vundle calls.
filetype plugin indent on
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList			- list configured plugins
" :PluginInstall(!)		- install (update) plugins
" :PluginSearch(!) foo	- search (or refresh cache first) for foo
" :PluginClean(1)		- confirm (or auto-approve) removal of unused plugins
"
" set :h vundle for mode details or wiki for FAQ
" Put your non-Plugin stuff after this line

" status bar
set statusline=%F%m%r%h%w\  "fullpath and status modified sign
set statusline+=\ %y "filetype
let g:git_branch_status_text=' Git'
let g:git_branch_status_head_current=1
let g:git_branch_status_nogit=""
set statusline+=\ %{GitBranchInfoString()}
set statusline+=%= " this line bumps the line number to RHS
set statusline+=\ [%l\/%L] "line number and column number

"make vim-rspec play nice with dispatch
let g:rspec_command = "Dispatch bundle exec rspec {spec}"

" auto load files if vim detects they have been changed outside of Vim
set autoread

" YCM settings
let g:ycm_min_num_of_chars_for_completion = 3
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1

" assume the /g flag on :s substitutions to replace all matches in a line
set gdefault

" fix slight delay after pressing ESC then O
" http://ksjoberg.com/vim-esckeys.html
" set noesckeys
set timeout timeoutlen=1000 ttimeoutlen=100

" allow unsaved background buffers and remember marks/undo for them
set hidden

" taken from https://github.com/dduponchel/dotfiles/blob/master/vim/vimrc
" Indicates a fast terminal connection.  More characters will be sent to
" the screen for redrawing, instead of using insert/delete line
" commands.  Improves smoothness of redrawing when there are multiple
" windows and the terminal does not support a scrolling region.
" Also enables the extra writing of characters at the end of each screen
" line for lines that wrap.  This helps when using copy/paste with the
" mouse in an xterm and other terminals.
set ttyfast

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" remember more commands and search history
set history=10000

" spaces > tabs.
" there, I said it.
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent

set spelllang=en_gb
syntax spell toplevel
" set some markdown specific things
autocmd FileType markdown setlocal shiftwidth=4 softtabstop=4 tabstop=4 wrap linebreak nolist wrap lbr colorcolumn=0
autocmd FileType tex setlocal colorcolumn=0 wrap lbr linebreak spell

set laststatus=2

" break properly, don't split words
set linebreak

" no folds
set nofoldenable

" show search matches as I type
set showmatch
set incsearch
set hlsearch

" Don't wait so long for the next keypress (particularly in ambigious Leader
" situations. (via @r00k dotfiles)
set timeoutlen=500

" make searches case-sensitive only if they contain upper-case characters
set ignorecase smartcase


" keep more context when scrolling off the end of a buffer
set scrolloff=5

" Store temporary files in a central spot
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Enable highlighting for syntax
syntax on

syntax spell toplevel

set wildmode=full
" make tab completion for files/buffers act like bash
set wildmenu

let mapleader=","

" ignore git, npm modules and jekyll _site
set wildignore+=*.o,*.obj,.git,node_modules,_site,*.class,*.zip,*.aux

" I like line numbers
set number
set relativenumber

" pretty colours
set t_Co=256
set term=xterm-256color
set background=dark

set list listchars=tab:»·,trail:·

" :Q to quit (should be default)
command! Q q

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" set up the mouse
" I know, mouse is bad, but this is useful purely for resizing splits visually
" http://usevim.com/2012/05/16/mouse/
set ttyfast
set mouse=a
set ttymouse=xterm2

" turn indentline off by default
let g:indentLine_enabled = 0

" settings for tags and vim-easytags
set tags=./.tags;
" 2 = will use ./.tags file, or create if it doesn't exist
let g:easytags_dynamic_files = 2


let g:tex_flavor = "latex"

" ~~~ MAPPINGS BELOW ~~~

" TODO: make this better, more intelligent
function! JF_find_private()
  execute "/private"
endfunction

function! OpenProjectNotes()
  let directory = getcwd()
  let filename = '_projectnotes.txt'
  exec ':vsplit ' . directory . '/' . filename
endfunction

map <leader>bb :!bundle install<cr>
map <leader>cf :CtrlPClearCache<cr>
map <leader>ct :TagbarToggle<CR>
map <leader>ctp :TagbarTogglePause<CR>
map <leader>e :call JF_ExecuteCurrentFile()<CR>
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
map <leader>gf :e Gemfile<cr>
map <leader>ls :echo UltiSnips_ListSnippets()<CR>
nnoremap <leader>mt :call MW_MakeTwitterReferenceLink()<CR>
nnoremap <leader>mfi :call MW_ConvertFencedToIndent()<CR>
nnoremap <leader>my :call MW_YamlFrontMatter()<CR>
nnoremap <leader>ml :call MW_MakeWordLink()<CR>
map <leader>nt :!npm test<cr>
nnoremap <Leader>p :set invpaste paste?<CR>
map <leader>pv :call JF_find_private()<cr>
map <leader>pj :e package.json<cr>
map <leader>pt :CtrlPTag<cr>
nnoremap <leader>pn :call OpenProjectNotes()<cr>
map <Leader>rn :Rename
map <Leader>rt :call RunCurrentSpecFile()<CR>
map <Leader>rs :call RunNearestSpec()<CR>
map <Leader>rl :call RunLastSpec()<CR>
map <Leader>ra :call RunAllSpecs()<CR>
map <leader>spj :vsplit package.json<cr>
map <leader>s :call JF_ExecuteRelevantTestFile()<CR>
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>sp :vsplit ~/dotfiles/scratchpad<cr>
map <leader>sc :setlocal spell!<CR>
map <leader>sa :call JF_RunAllTests()<CR>
map <leader>sph <C-w>t<C-w>K<CR>
map <leader>spv <C-w>t<C-w>H<CR>
map <leader>t :CtrlP<cr>
map <leader>us :UltiSnipsEdit<CR>
" cleans up whitespace
" TODO extract this into FN which sets mark so it jumps back to where you were
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<cr>
map <Leader>p :set paste<CR>o<esc>"*]p:set nopaste<cr>

" map saving and tabs to Control-"
map <C-s> <esc>:w<CR>
imap <C-s> <esc>:w<CR>
map <C-q> <esc>:x<CR>
imap <C-q> <esc>:x<CR>
map <C-t> <esc>:tabnew<CR>
" ctrl n to esc, save and then run Make (sends make but through vim dispatch)
map <C-n> <esc>:w<CR>:Make<CR>
imap <C-n> <esc>:w<CR>:Make<CR>

" make it do . in visual mode
vnoremap . :norm.<CR>

" control P
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|bower_components\'
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_extensions = ['tag']

" navigating tabs
nnoremap th  :tabfirst<CR>
nnoremap tj  :tabnext<CR>
nnoremap tk  :tabprev<CR>
nnoremap tl  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tn  :tabnext<Space>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>

" Don't add the comment prefix when I hit enter or o/O on a comment line.
autocmd FileType * setlocal formatoptions-=r formatoptions-=o

" ultisnips settings so they don't compete with YCM
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<s-c-j>"
let g:UltiSnipsSnippetDirectories=["UltiSnips"]

"This unsets the 'last search pattern' register by hitting return
nnoremap <CR> :noh<CR><CR>

" http://robots.thoughtbot.com/faster-grepping-in-vim/
" Use ag over grep
set grepprg=ag\ --nogroup\ --nocolor

" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR><CR>

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=


" Protect large files from sourcing and other overhead.
" http://vim.wikia.com/wiki/Faster_loading_of_large_files
" Files become read only
if !exists("my_auto_commands_loaded")
  let my_auto_commands_loaded = 1
  " Large files are > 10M
  " Set options:
  " eventignore+=FileType (no syntax highlighting etc
  " assumes FileType always on)
  " noswapfile (save copy of file)
  " bufhidden=unload (save memory when other file is viewed)
  " buftype=nowritefile (is read-only)
  " undolevels=-1 (no undo possible)
  let g:LargeFile = 1024 * 1024 * 10
  augroup LargeFile
    autocmd BufReadPre * let f=expand("<afile>") | if getfsize(f) > g:LargeFile | set eventignore+=FileType | setlocal noswapfile bufhidden=unload buftype=nowrite undolevels=-1 | else | set eventignore-=FileType | endif
  augroup END
endif

